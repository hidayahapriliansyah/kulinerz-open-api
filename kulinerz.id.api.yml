openapi: "3.0.2"
info:
  title: Kulinerz App
  version: "1.0"
  description: OpenAPI for Kulinerz App contains all of service for customer, resto, location, and image upload.
  termsOfService: https://kulinez.id/terms-of-service
  contact:
    email: adimuhamadfirmansyah@gmai.com
    name: Adi Muhamad Firmansyah
    url: hidayahapriliansyah.me
  license:
    name: Kulinerz
    url: https://kulinez.id/licence
servers:
  - url: https://{environment}.kulinerz.id/api/v2
    description: Server Environment
    variables:
      environment:
        default: dev
        enum:
          - "dev"
          - "qa"
          - "api"
externalDocs:
  url: https://www.notion.so/API-Specs-f5f3dd561cdc4e35a57b6fdc451bcf03
paths:
  /province:
    get:
      tags:
        - Location
      description: Return all province
      security:
        - RestoAccessTokenAuth: []
      responses:
        "200":
          description: Return province list
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            province:
                              type: string
              examples:
                Success:
                  description: Success get all province
                  value:
                    {
                      "success": true,
                      "message": "Getting provinces data successfully.",
                      "data":
                        [
                          { "id": "31", "province": "DKI JAKARTA" },
                          { "id": "32", "province": "JAWA BARAT" },
                          { "id": "33", "province": "JAWA TENGAH" },
                          { "id": "34", "province": "DI YOGYAKARTA" },
                          { "id": "35", "province": "JAWA TIMUR" },
                        ],
                    }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "500":
          $ref: "#/components/responses/ServerError"
  /regency:
    get:
      tags:
        - Location
      description: Return regency list base on selected province
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/ProvinceId"
      responses:
        "200":
          description: Success to get regecy list
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            provinceId:
                              type: string
                            regency:
                              type: string
              example:
                {
                  "success": true,
                  "message": "Getting regencies data successfully.",
                  "data":
                    [
                      {
                        "id": "3204",
                        "provinceId": "32",
                        "regency": "KABUPATEN BANDUNG",
                      },
                      {
                        "id": "3205",
                        "provinceId": "32",
                        "regency": "KABUPATEN GARUT",
                      },
                      {
                        "id": "3206",
                        "provinceId": "32",
                        "regency": "KABUPATEN TASIKMALAYA",
                      },
                    ],
                }
        "404":
          description: Regency from province id provinceId is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Resource not found. Province id provinceId is not exist.",
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "500":
          $ref: "#/components/responses/ServerError"
  /district:
    get:
      tags:
        - Location
      description: Return district list base on selected regency
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - name: regencyId
          in: query
          required: true
          description: Regency id
          schema:
            type: string
            nullable: false
            default:
      responses:
        "200":
          description: Success to get district list
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            regencyId:
                              type: string
                            district:
                              type: string
              example:
                {
                  "success": true,
                  "message": "Getting district data successfully",
                  "data":
                    [
                      {
                        "id": "3206160",
                        "regencyId": "3206",
                        "district": "MANONJAYA",
                      },
                      {
                        "id": "3206161",
                        "regencyId": "3206",
                        "district": "GUNUNGTANJUNG",
                      },
                      {
                        "id": "3206190",
                        "regencyId": "3206",
                        "district": "SINGAPARNA",
                      },
                    ],
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "404":
          description: Regency from province id is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Resource not found. regency id regencyId is not exist.",
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /village:
    get:
      tags:
        - Location
      description: Return list of village
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - name: districtId
          in: query
          required: true
          description: District Id
          schema:
            type: string
            nullable: false
            default:
      responses:
        "200":
          description: Success to get village list
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            districtId:
                              type: string
                            village:
                              type: string
              example:
                {
                  "success": true,
                  "data":
                    [
                      {
                        "id": "3206161001",
                        "districtId": "3206161",
                        "village": "CINUNJANG",
                      },
                      {
                        "id": "3206161002",
                        "districtId": "3206161",
                        "village": "MALATISUKA",
                      },
                      {
                        "id": "3206161003",
                        "districtId": "3206161",
                        "village": "GIRIWANGI",
                      },
                      {
                        "id": "3206161004",
                        "districtId": "3206161",
                        "village": "JATIJAYA",
                      },
                      {
                        "id": "3206161005",
                        "districtId": "3206161",
                        "village": "GUNUNGTANJUNG",
                      },
                    ],
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "404":
          description: Village from district id is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Resource not found. district id districtId is not exist.",
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/auth/signin:
    post:
      tags:
        - Resto
        - Resto Auth
      description: API for admin resto to signin via form
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
            example:
              {
                "email": "adimuhamadfirmansyah@gmail.com",
                "password": "rahasiabangetpokoknyahehehehehe",
              }
      responses:
        "200":
          description: Signin Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessSigninResponse"
              example:
                $ref: "#/components/examples/SuccessSigninResponse"
        "404":
          description: Credential error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Credential Error. User is not exist.",
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "email or password body payload is missing.",
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/auth/signin/google:
    get:
      tags:
        - Resto
        - Resto Auth
      description: API for admin resto to sign in via Google Oauth
      responses:
        "200":
          description: Sigin via oauth is success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessSigninResponse"
              example:
                $ref: "#/components/examples/SuccessSigninResponse"
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/auth/signup:
    post:
      tags:
        - Resto
        - Resto Auth
      description: API for admin resto to sign up via form
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/RestoName"
                username:
                  $ref: "#/components/schemas/Username"
                email:
                  $ref: "#/components/schemas/Email"
                password:
                  $ref: "#/components/schemas/Password"
              required:
                - name
                - username
                - email
                - password
            example:
              {
                "name": "Restaurant Example",
                "username": "examplerestaurant",
                "email": "restaurant@gmail.com",
                "password": "password1234!@#$",
              }
      responses:
        "201":
          description: New user resto created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          userId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Signup successfully.",
                  "data": { "userId": "f47ac10b-58cc-4372-a567-0e02b2c3d479" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Validation errors in your request.",
                  "errors":
                    [
                      {
                        "message": "Nama restoran minimal memiliki 3 karakter",
                        "field": "name",
                      },
                      { "message": "Email harus diisi", "field": "email" },
                    ],
                }
        "409":
          description: Conflict Error. Duplicate username or email
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Username:
                  value:
                    {
                      "success": false,
                      "message": "username is exist. Please use another.",
                    }
                Email:
                  value:
                    {
                      "success": false,
                      "message": "email is exist. Please use another.",
                    }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/auth/signup/google:
    get:
      tags:
        - Resto
        - Resto Auth
      description: API for admin resto to sign in via Google Oauth
      responses:
        "200":
          description: Sigin via oauth is success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessSigninResponse"
              example:
                $ref: "#/components/examples/SuccessSigninResponse"
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/auth/signout:
    get:
      tags:
        - Resto
        - Resto Auth
      description: API for admin resto to sign out
      responses:
        "200":
          description: Signout success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIResponse"
              example: { "success": true, "message": "Sign out successfully." }
  /resto/profile:
    get:
      tags:
        - Resto
        - Resto Profile
      description: API to get restaurant profile information
      security:
        - RestoAccessTokenAuth: []
      responses:
        "200":
          description: Success to get profile
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          avatar:
                            type: string
                          username:
                            type: string
                          name:
                            type: string
                          address:
                            nullable: true
                            type: object
                            properties:
                              provinceId:
                                nullable: true
                                type: string
                              regencyId:
                                nullable: true
                                type: string
                              districtId:
                                nullable: true
                                type: string
                              villageId:
                                nullable: true
                                type: string
                              locationLink:
                                nullable: true
                                type: string
                              detail:
                                nullable: true
                                type: string
                          contact:
                            nullable: true
                            type: string
                          imageGallery:
                            type: array
                          bussinessHours:
                            type: object
                            properties:
                              openingHours:
                                nullable: true
                                type: string
                              closingHours:
                                nullable: true
                                type: string
                              daysOff:
                                type: array
                          fasilities:
                            type: array
              examples:
                Complete:
                  value:
                    {
                      "success": true,
                      "message": "Get restaurant profile data successfully.",
                      "data":
                        {
                          "avatar": "avatar.jpg",
                          "username": "rumahmakancontoh",
                          "name": "Rumah Makan Contoh",
                          "address":
                            {
                              "provinceId": "11",
                              "regencyId": "1101",
                              "districtId": "1101010",
                              "villageId": "1101010001",
                              "locationLink": "https://www.google.com/maps/d/viewer?mid=1LS-Yj--ntUP_auDwGCayJkbNFig&hl=en_US&ll=5.538846584005121%2C95.3387842076674&z=14",
                              "detail": "Kampung apa alamat mana jalan mana bebas",
                            },
                          "contact": "08123456789",
                          "imageGallery":
                            [
                              "http://image.example.com/image1",
                              "http://image.example.com/image2",
                              "http://image.example.com/image3",
                              "http://image.example.com/image4",
                              "http://image.example.com/image5",
                            ],
                          "bussinessHours":
                            {
                              "openingHour": "08:00",
                              "closingHour": "22:00",
                              "daysOff": ["Saturday", "Sunday"],
                            },
                          "fasilities":
                            [
                              "Wi-Fi Gratis",
                              "Area Merokok/Area bebas asap rokok",
                            ],
                        },
                    }
                Uncomplete:
                  value:
                    {
                      {
                        "success": true,
                        "message": "Get restaurant profile data successfully.",
                        "data":
                          {
                            "avatar": "avatar.jpg",
                            "username": "rumahmakancontoh",
                            "name": "Rumah Makan Contoh",
                            "address": null,
                            "contact": "08123456789",
                            "imageGallery": [],
                            "bussinessHours":
                              {
                                "openingHour": "08:00",
                                "closingHour": "22:00",
                                "daysOff": ["Saturday", "Sunday"],
                              },
                            "fasilities": [],
                          },
                      },
                    }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Validation errors in your request.",
                  "errors":
                    [
                      {
                        "message": "username harus berupa huruf kecil, number, titik atau underscore.",
                        "field": "username",
                      },
                      {
                        "message": "name harus berupa a-zA-Z 0-9 . , - '",
                        "field": "name",
                      },
                    ],
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "500":
          $ref: "#/components/responses/ServerError"
    put:
      tags:
        - Resto
        - Resto Profile
      description: API to update restaurant profile information
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                avatar:
                  $ref: "#/components/schemas/Avatar"
                username:
                  $ref: "#/components/schemas/Username"
                name:
                  $ref: "#/components/schemas/RestoName"
                villageId:
                  $ref: "#/components/schemas/VillageId"
                locationLink:
                  $ref: "#/components/schemas/RestoLocationLink"
                detail:
                  $ref: "#/components/schemas/RestoDetail"
                contact:
                  $ref: "#/components/schemas/RestoContact"
                imageGallery:
                  $ref: "#/components/schemas/RestoImageGallery"
                openingHour:
                  $ref: "#/components/schemas/RestoOpeningHour"
                closingHour:
                  $ref: "#/components/schemas/RestoClosingHour"
                daysOff:
                  $ref: "#/components/schemas/RestoDaysOff"
                fasilities:
                  $ref: "#/components/schemas/RestoFasilities"
      responses:
        "200":
          description: Success update profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIReturnUserIdResponse"
              example:
                {
                  "success": true,
                  "message": "Update restaurant profile data successfully.",
                  "data": { "userId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Validation errors in your request.",
                  "errors":
                    [
                      {
                        "message": "Nama restoran minimal memiliki 3 karakter",
                        "field": "name",
                      },
                      { "message": "Email harus diisi", "field": "email" },
                    ],
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "409":
          $ref: "#/components/responses/RestoConflictError"
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/profile/setup/:
    put:
      tags:
        - Resto
        - Resto Profile
      description: API to update restaurant profile information after signnup using oauth
      security:
        - RestoAccessTokenAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  $ref: "#/components/schemas/Username"
                name:
                  $ref: "#/components/schemas/RestoName"
                password:
                  $ref: "#/components/schemas/Password"
            example:
              {
                "username": "rumahmakancontoh",
                "name": "Rumah Makan Contoh",
                "password": "password1232323",
              }
      responses:
        "200":
          description: Success to setup profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIReturnUserIdResponse"
              example:
                {
                  "success": true,
                  "message": "Update restaurant profile data successfully.",
                  "data": { "userId": "f47ac10b-58cc-4372-a567-0e02b2c3d479" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Validation errors in your request.",
                  "errors":
                    [
                      {
                        "message": "username harus berupa huruf kecil, number, titik atau underscore.",
                        "field": "username",
                      },
                      {
                        "message": "name harus berupa a-zA-Z 0-9 . , - '",
                        "field": "name",
                      },
                    ],
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                RestoEmailIsNotVerifiedError:
                  $ref: "#/components/examples/RestoEmailIsNotVerifiedError"
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/profile/customer-payment-type:
    put:
      tags:
        - Resto
        - Resto Profile
      description: API to update restaurant customer payment type
      security:
        - RestoAccessTokenAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                customerPayment:
                  type: string
                  enum:
                    - AFTER_ORDER
                    - BEFORE_ORDER
              required:
                - customerPayment
            example: { "customerPayment": "BEFORE_ORDER" }
      responses:
        "200":
          description: Success update customer payment type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIReturnUserIdResponse"
              example:
                {
                  "success": true,
                  "message": Update restaurant customer payment type successfully.",
                  "data": { "userId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Validation errors in your request.",
                  "errors":
                    [
                      {
                        "message": "customerPayment tidak valid.",
                        "field": "customerPayment",
                      },
                    ],
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/account/verification/:
    post:
      tags:
        - Resto
        - Resto Account
      description: API to update restaurant customer payment type
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: "#/components/schemas/Email"
            example: { "email": "restorancontoh@gmail.com" }
      responses:
        "200":
          description: Success to send email verification request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIResponse"
              example:
                {
                  "success": true,
                  "message": "Success sending email verification request to system.",
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorAPIResponse"
              example:
                {
                  "success": true,
                  "message": "Validation errors in your request.",
                  "errors":
                    [{ "message": "email tidak valid", "field": "email" }],
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/account/verification/{uniqueString}:
    get:
      tags:
        - Resto
        - Resto Account
      description: API to update restaurant customer payment type
      parameters:
        - $ref: "#/components/parameters/UniqueString"
      responses:
        "200":
          description: Success to verify email
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIResponse"
              example:
                {
                  "success": true,
                  "message": "Email verification is valid. This account is now verified.Email verification is valid. This account is now verified.",
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "uniqueString param is missing.",
                }
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Verification Not Found:
                  value:
                    {
                      "success": false,
                      "message": "Verification request is not found.",
                    }
                Restaurant Not Found:
                  value:
                    { "success": false, "message": "Restaurant is not found." }
        "409":
          description: Email already verified
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Email address already verified. You have already verified your email address.",
                }
        "498":
          description: Request Id (uniqueString) is expired
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Request Id is expired. Please make a new verification request.",
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/account/reset/request:
    post:
      description: API for sending reset password request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: "#/components/schemas/Email"
            example: { "email": "restorancontoh@gmail.com" }
      responses:
        "200":
          description: Success to send reset password request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIResponse"
              example:
                {
                  "success": true,
                  "message": "Success sending reset password request to system",
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/account/reset/{uniqueString}:
    get:
      description: API to update check reset password reset request
      parameters:
        - $ref: "#/components/parameters/UniqueString"
      responses:
        "200":
          description: Success to verify request reset password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIResponse"
              example:
                {
                  "success": true,
                  "message": "Request password is valid. Please continue to create the new password.",
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "uniqueString param is missing.",
                }
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example: { "success": false, "message": "Request is not found." }
        "498":
          description: Request Id (uniqueString) is expired
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Request Id is expired. Please make a new verification request.",
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/account/reset/confirmation:
    post:
      description: Create new password via reset password request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  $ref: "#/components/schemas/Password"
                requestId:
                  type: string
              required:
                - password
                - requestId
            example:
              {
                "password": "newpassword123!@#",
                "requestId": "550e8400-e29b-41d4-a716-44665544000",
              }
      responses:
        "200":
          description: Success to create new password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIResponse"
              example:
                {
                  "success": true,
                  "message": "New password saved successfully. Please continue to sign in.",
                }
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example: { "success": false, "message": "Request is not found." }
        "498":
          description: Request Id (uniqueString) is expired
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Request Id is expired. Please make a new verification request.",
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/menus/etalase:
    get:
      tags:
        - Resto
        - Resto Menus
      description: API to get restaurant etalase
      security:
        - RestoAccessTokenAuth: []
      responses:
        "200":
          description: Success get all restaurant etalase
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            name:
                              type: string
                          required:
                            - id
                            - name
                    required:
                      - success
                      - message
                      - data
                example:
                  {
                    "success": true,
                    "message": "Success to get elatase data.",
                    "data":
                      [
                        {
                          "id": "550e8400-e29b-41d4-a716-44665544000",
                          "name": "Pedas",
                        },
                        {
                          "id": "550e8400-e29b-41d4-a716-44665544000",
                          "name": "Minuman Segar",
                        },
                      ],
                  }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      tags:
        - Resto
        - Resto Menus
      description: API to create restaurant etalase
      security:
        - RestoAccessTokenAuth: []
      requestBody:
        $ref: "#/components/requestBodies/CreateAndUpdateEtalase"
      responses:
        "201":
          description: Success to create etalase
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIReturnEtalaseIdResponse"
              example:
                {
                  "success": true,
                  "message": "Success to create etalase",
                  "data":
                    { "etalaseId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/menus/etalase/{etalaseId}:
    put:
      tags:
        - Resto
        - Resto Menus
      description: API to update restaurant etalase
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/EtalaseId"
      requestBody:
        $ref: "#/components/requestBodies/CreateAndUpdateEtalase"
      responses:
        "200":
          description: Success to update etalase
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIReturnEtalaseIdResponse"
              example:
                {
                  "success": true,
                  "message": "Success to update etalase",
                  "data":
                    { "etalaseId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "EetalasId param is missing." }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example: { "success": false, "message": "Etalase is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - Resto
        - Resto Menus
      description: API to delete restaurant etalase
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/EtalaseId"
      responses:
        "200":
          description: Success to delete etalase
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIReturnEtalaseIdResponse"
              example:
                {
                  "success": true,
                  "message": "Success to delete etalase",
                  "data":
                    { "etalaseId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                EtalaseId param is missing:
                  value:
                    {
                      "success": false,
                      "message": "etalasId param is missing.",
                    }
                Etalase has menu:
                  value:
                    {
                      "success": false,
                      "message": "Etalase with menus can not be deleted. Please ensure the etalase is empty before attempting deletion.",
                    }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example: { "success": false, "message": "Etalase is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/menus:
    get:
      tags:
        - Resto
        - Resto Menus
      description: API to get all restaurant menus
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/LimitPagination"
        - $ref: "#/components/parameters/PagePagination"
        - name: isActive
          in: query
          required: false
          description: filter menu isActive
          schema:
            type: string
            enum:
              - "0"
              - "1"
      responses:
        "200":
          description: Success get all menus
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          menus:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: string
                                name:
                                  type: string
                                isActive:
                                  type: boolean
                                price:
                                  type: number
                              required:
                                - id
                                - name
                                - isActive
                                - price
                          pages:
                            type: number
                            description: Count of many page of data will be divided
                          total:
                            type: number
                            description: Total of all found data
                        required:
                          - menus
                          - pages
                          - total
                    required:
                      - success
                      - message
                      - data
              example:
                # engke
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      tags:
        - Resto
        - Resto Menus
      description: API to get all restaurant menus
      security:
        - RestoAccessTokenAuth: []
      requestBody:
        $ref: "#/components/requestBodies/CreateAndUpdateMenu"
      responses:
        "201":
          description: Success to create menu
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          menuId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Creating menu successfully.",
                  "data": { "menuId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ValidationErrorAPIResponse"
                  - $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Validation errors in your request.",
                  "errors":
                    [
                      {
                        "message": "name harus berupa a-z A-Z 0-9 . ' -",
                        "field": "name",
                      },
                    ],
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Etalase Id not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example: { "success": true, "message": "Etalase is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/menus/{slug}:
    get:
      tags:
        - Resto
        - Resto Menus
      description: API to get menu detail by slug
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - name: slug
          in: path
          required: true
          description: Slug of menu title
          schema:
            type: string
      responses:
        "200":
          description: Success to get menu detail
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIResponse"
              example:
                { "success": true, "message": "Success to get menu data." }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Menu not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example: { "success": true, "message": "Menu is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/menus/{menuId}:
    put:
      tags:
        - Resto
        - Resto Menus
      description: API to update menu
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - name: menuId
          in: path
          description: Menu Id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/CreateAndUpdateMenu"
      responses:
        "200":
          description: Success to update menu
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          menuId:
                            type: string
                        required:
                          - menuId
                    required:
                      - success
                      - message
                      - data
              example:
                {
                  "success": true,
                  "message": "Updating menu successfully.",
                  "data": { "menuId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorAPIResponse"
              example:
                Validation Error:
                  value:
                    {
                      "success": false,
                      "message": "Validation errors in your request.",
                      "errors":
                        [
                          {
                            "message": "name harus berupa a-z A-Z 0-9 . ' -",
                            "field": "name",
                          },
                        ],
                    }
                menuId Param Missing:
                  value:
                    { "success": false, "message": "menuId param is missing." }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Etalase Id not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example: { "success": true, "message": "Etalase is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - Resto
        - Resto Menus
      description: API to update menu
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - name: menuId
          in: path
          description: Menu Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success to delete menu
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          menuId:
                            type: string
                        required:
                          - menuId
                    required:
                      - success
                      - message
                      - data
              example:
                {
                  "success": true,
                  "message": "Deleting menu successfully.",
                  "data": { "menuId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "menuId param is missing." }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Menu not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Menu Id not found. Please input valid id menu.",
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/custom-menu/categories:
    get:
      tags:
        - Resto
        - Resto Custom Menu
      description: API to get all custom menu category
      security:
        - RestoAccessTokenAuth: []
      responses:
        "200":
          description: Success to get list custom menu categories
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            name:
                              type: string
                          required:
                            - id
                            - name
                    required:
                      - success
                      - message
                      - data
              example:
                # engke
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      tags:
        - Resto
        - Resto Custom Menu
      description: API to get create custom menu category
      security:
        - RestoAccessTokenAuth: []
      requestBody:
        $ref: "#/components/requestBodies/CreateAndUpdateCustomMenuCategory"
      responses:
        "200":
          description: Success to create custom menu category
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          customMenuCateogryId:
                            type: string
                        required:
                          - customMenuCateogryId
                    required:
                      - success
                      - message
                      - data
              example:
                {
                  "success": true,
                  "message": "Creating menu successfully.",
                  "data":
                    {
                      "customMenuCategoryId": "550e8400-e29b-41d4-a716-44665544000",
                    },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Validation errors in your request.",
                  "errors":
                    [
                      {
                        "message": "name maksimal memiliki 50 karakter.",
                        "field": "name",
                        s,
                      },
                    ],
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/custom-menu/categories/{categoryId}:
    get:
      tags:
        - Resto
        - Resto Custom Menu
      description: API to get specific menu category detail by id
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/CategoryId"
      responses:
        "200":
          description: Success to get custom menu category detail
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: string
                          name:
                            type: string
                          isBungkusAble:
                            type: boolean
                          maxSpicy:
                            type: number
                            nullable: true
                        required:
                          - id
                          - name
                          - isBungkusAble
                          - maxSpicy
                    required:
                      - success
                      - message
                      - data
                example:
                  # engke
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "404":
          description: Custom Menu Category is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Custom menu category is not found.",
                }
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "500":
          $ref: "#/components/responses/ServerError"
    put:
      tags:
        - Resto
        - Resto Custom Menu
      description: API to update specific menu category detail by id
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/CategoryId"
      requestBody:
        $ref: "#/components/requestBodies/CreateAndUpdateCustomMenuCategory"
      responses:
        "200":
          description: Success to update custom menu category
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          customMenuCateogryId:
                            type: string
                        required:
                          - customMenuCateogryId
                    required:
                      - success
                      - message
                      - data
              example:
                {
                  "success": true,
                  "message": "Updating category custom menu successfully.",
                  "data":
                    {
                      "customMenuCategoryId": "550e8400-e29b-41d4-a716-44665544000",
                    },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ValidationErrorAPIResponse"
                  - $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Validation Error:
                  value:
                    {
                      "success": false,
                      "message": "Validation errors in your request.",
                      "errors":
                        [
                          {
                            "message": "name maksimal memiliki 50 karakter.",
                            "field": "name",
                            s,
                          },
                        ],
                    }
                categoryId Param is Missing:
                  value:
                    {
                      "success": false,
                      "message": "categoryId param is missing.",
                    }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example: { "success": false, "message": "Menu is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - Resto
        - Resto Custom Menu
      description: API to delete specific custom menu category detail by id
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/CategoryId"
      responses:
        "200":
          description: Success to delete custom menu category
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          customMenuCateogryId:
                            type: string
                        required:
                          - customMenuCateogryId
                    required:
                      - success
                      - message
                      - data
              example:
                {
                  "success": true,
                  "message": "Success to delete custom menu category data.",
                  "data":
                    {
                      "customMenuCategoryId": "550e8400-e29b-41d4-a716-44665544000",
                    },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "categoryId param is missing." }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example: { "success": false, "message": "Menu is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/custom-menu/compositions:
    get:
      tags:
        - Resto
        - Resto Custom Menu
      description: API to get all custom menu composition
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/LimitPagination"
        - $ref: "#/components/parameters/PagePagination"
        - name: category
          in: query
          required: false
          description: Custom menu category id
          schema:
            type: string
        - name: name
          in: query
          required: false
          description: Custom menu composition name
          schema:
            type: string
      responses:
        "200":
          description: Success to get all custom menu composition
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: string
                          name:
                            type: string
                          isBungkusAble:
                            type: boolean
                          maxSpicy:
                            type: number
                            nullable: true
                        required:
                          - id
                          - name
                          - isBungkusAble
                          - maxSpicy
                    required:
                      - success
                      - message
                      - data
                example:
                  # engke
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Input page is bigger than total pages.",
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "404":
          description: Custom Menu Category is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Custom menu category is not found.",
                }
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      tags:
        - Resto
        - Resto Custom Menu
      description: API to get all custom menu composition
      security:
        - RestoAccessTokenAuth: []
      requestBody:
        $ref: "#/components/requestBodies/CreateAndUpdateCustomMenuComposition"
      responses:
        "201":
          description: Success to create custom menu composition
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          customMenuCompositionId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Creating menu successfully.",
                  "data":
                    {
                      "customMenuCompositionId": "550e8400-e29b-41d4-a716-44665544000",
                    },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Validation errors in your request.",
                  "errors":
                    [
                      {
                        "message": "description minimal memiliki 1 karakter.",
                        "field": "description",
                      },
                      {
                        "message": "image maksimal memiliki 2 item.",
                        "field": "image",
                      },
                    ],
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Custom Menu Category is not found.",
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/custom-menu/compositions/{compositionId}:
    get:
      tags:
        - Resto
        - Resto Custom Menu
      description: API to get detail custom menu composition by id
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/CustomMenuCompositionId"
      responses:
        "200":
          description: Success to get custom menu composition detail
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: string
                          customMenuCategoryId:
                            type: string
                          description:
                            type: string
                          price:
                            type: number
                          stock:
                            type: number
                          images:
                            nullable: true
                            type: array
                            items:
                              type: string
                        required:
                          - id
                          - customMenuCategoryId
                          - description
                          - price
                          - stock
                          - images
              example:
                # engke
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Composition Custom Menu is not found.",
                }
        "500":
          $ref: "#/components/responses/ServerError"
    put:
      tags:
        - Resto
        - Resto Custom Menu
      description: API to update custom menu composition by id
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/CustomMenuCompositionId"
      requestBody:
        $ref: "#/components/requestBodies/CreateAndUpdateCustomMenuComposition"
      responses:
        "200":
          description: Success to update custom menu composition
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          customMenuCompositionId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Updating custom menu composition successfully.",
                  "data":
                    {
                      "customMenuCompositionId": "550e8400-e29b-41d4-a716-44665544000",
                    },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ValidationErrorAPIResponse"
                  - $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                compostionId is Missing:
                  value:
                    {
                      "success": false,
                      "message": "compositionId param is missing.",
                    }
                Validation Input Error:
                  value:
                    {
                      "success": false,
                      "message": "Validation errors in your request.",
                      "errors":
                        [
                          {
                            "message": "description minimal memiliki 1 karakter.",
                            "field": "description",
                          },
                          {
                            "message": "image maksimal memiliki 2 item.",
                            "field": "image",
                          },
                        ],
                    }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Custom Menu Composition Not Found:
                  value:
                    {
                      "success": false,
                      "message": "Custom Menu Composition is not found.",
                    }
                Custom Menu Category Not Found:
                  value:
                    {
                      "success": false,
                      "message": "Custom Menu Category is not found.",
                    }
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - Resto
        - Resto Custom Menu
      description: API to delete custom menu composition by id
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/CustomMenuCompositionId"
      responses:
        "200":
          description: Success to delete custom menu composition
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          customMenuCompositionId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Deleting custom menu composition successfully.",
                  "data":
                    {
                      "customMenuCompositionId": "550e8400-e29b-41d4-a716-44665544000",
                    },
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Composition Custom Menu is not found.",
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/notifications/:
    get:
      tags:
        - Resto
        - Resto Notification
      description: API to get all notification
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/LimitPagination"
        - $ref: "#/components/parameters/PagePagination"
        - name: read
          in: query
          required: false
          description: Status isRead of notifcation with "0" or "1"
          schema:
            type: string
      responses:
        "200":
          description: Success to get all restaurant notification
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          notifications:
                            type: array
                          pages:
                            type: number
                            description: Total pages of displayed data
                          total:
                            type: number
                            description: Total count all data
                        required:
                          - notifications
                          - pages
                          - total
                    required:
                      - success
                      - message
                      - data
              example:
                # engke
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/notifications/all:
    put:
      tags:
        - Resto
        - Resto Notification
      description: API to update all notification status isRead to be true
      security:
        - RestoAccessTokenAuth: []
      responses:
        "200":
          description: Success to update all notifcation status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIResponse"
              example:
                {
                  "success": true,
                  "message": "Updating all notification read status successfully.",
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/notifications/{notificationId}:
    put:
      tags:
        - Resto
        - Resto Notification
      description: API to get update specific notification status isRead to be true by id
      security:
        - RestoAccessTokenAuth: []
      responses:
        "200":
          description: Succes to update notification status
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          notificationId:
                            type: string
                        required:
                          - notificationId
                    required:
                      - success
                      - message
                      - data
              example:
                {
                  "success": true,
                  "message": "Updating notification status successfully.",
                  "data":
                    { "notificationId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "notificationId param is missing.",
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "Notification is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/notifications/count:
    get:
      tags:
        - Resto
        - Resto Notification
      description: API to get total unred notification
      security:
        - RestoAccessTokenAuth: []
      responses:
        "200":
          description: Success to get total unread notifcation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          unreadNotification:
                            type: number
                        required:
                          - unreadNotification
                    required:
                      - success
                      - message
                      - data
              example:
                {
                  "success": true,
                  "message": "Success to get the number of unread notification data.",
                  "data": { "unreadNotification": 5 },
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/orders/:
    get:
      tags:
        - Resto
        - Resto Orders
      description: API to get all order
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/PagePagination"
        - name: status
          in: query
          required: false
          description: Order status
          schema:
            type: string
            enum:
              - READY_TO_ORDER
              - ACCEPTED_BY_RESTO
              - PROCESSED_BY_RESTO
              - DONE_BY_RESTO
              - ACCEPTED_BY_CUSTOMER
              - CANCEL_BY_RESTO
              - UNPAID
        - name: startDate
          in: query
          required: false
          description: Order filter time start date
          schema:
            type: string
        - name: endDate
          in: query
          required: false
          description: Order filter time end date
          schema:
            type: string
      responses:
        "200":
          description: Success to get order list
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          orders:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: string
                                createdAt:
                                  type: string
                                isGroup:
                                  type: boolean
                                customer:
                                  type: object
                                  properties:
                                    username:
                                      type: string
                                    name:
                                      type: string
                                    image:
                                      type: string
                                total:
                                  type: number
                                status:
                                  type: boolean
                                isPaid:
                                  type: boolean
                          pages:
                            type: number
                          total:
                            type: number
              example:
                # engke
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Page Query Not Number:
                  value:
                    { "success": false, "message": "page query is not number." }
                startDate or endDate  is not valid:
                  value:
                    {
                      "success": false,
                      "message": "startDate or endDate query is not valid.",
                    }
                startDate is greatet than endDate:
                  value:
                    {
                      "success": false,
                      "message": "startDate is greater than endDate.",
                    }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/orders/count:
    get:
      tags:
        - Resto
        - Resto Orders
      description: API to get count order
      security:
        - RestoAccessTokenAuth: []
      responses:
        "200":
          description: Succes to get count order
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderSuccessResponse"
              example:
                {
                  "success": true,
                  "message": "Getting count order data successfully.",
                  "data":
                    {
                      accepted: 5,
                      processed: 5,
                      done: 5,
                      cancel: 5,
                      total: 20,
                    },
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/orders/today:
    get:
      tags:
        - Resto
        - Resto Orders
      description: API to get today order
      security:
        - RestoAccessTokenAuth: []
      responses:
        "200":
          description: Success to get today order
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderSuccessResponse"
              example:
                {
                  "success": true,
                  "message": "Getting count order data successfully.",
                  "data":
                    {
                      accepted: 5,
                      processed: 5,
                      done: 5,
                      cancel: 5,
                      total: 20,
                    },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": true, "message": "page query is not number." }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/orders/find:
    get:
      tags:
        - Resto
        - Resto Orders
      description: API to find order detail by customer username
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - name: customerUsername
          in: query
          required: true
          description: Username of ordered Customer
          schema:
            type: string
      responses:
        "200":
          description: Success to find order by username customer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderDetailResponse"
              example:
              # engke
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "customerUsername query is missing.",
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                Customer Not Found:
                  value:
                    { "success": false, "message": "Customer is not found." }
                Customer Order Not Found:
                  value:
                    {
                      "success": false,
                      "message": "Customer order is not found.",
                    }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/orders/{orderId}:
    get:
      tags:
        - Resto
        - Resto Orders
      description: API to get order detail by id
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/OrderId"
      responses:
        "200":
          description: Success to get order detail by order id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderDetailResponse"
              example:
                # engke
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example: { "success": false, "message": "Order is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/orders/{orderId}/status:
    put:
      tags:
        - Resto
        - Resto Orders
      description: API to get order status by id
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/OrderId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - ACCEPTED
                    - PROCESSED
                    - DONE
                    - CANCEL
              required:
                - status
      responses:
        "200":
          description: Success to update order status
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          orderId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Updating order status successfully.",
                  "data": { "orderId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          $ref: "#/components/responses/UpdateOrderStatusBadRequestError"
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": true,
                  "message": "Order is not found."
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/orders/{orderId}/paid:
    put:
      tags:
        - Resto
        - Resto Orders
      description: API to update order paid status by id
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/OrderId"
      responses:
        "200":
          description: Success to update order paid status
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          orderId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Updating order payment status successfully.",
                  "data": {
                    "orderId": "550e8400-e29b-41d4-a716-44665544000"
                  }
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                orderId param is missing:
                  value:
                    {
                      "success": false,
                      "message": "orderId param is missing."
                    }
                Order has Paid:
                  value:
                    {
                      "success": false,
                      "message": "Order status has been paid."
                    }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Order is not found.",
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/orders/{botramOrderId}/botram/status:
    put:
      tags:
        - Resto
        - Resto Orders
      description: API to update botram order paid status by id
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/BotramOrderId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - ACCEPTED
                    - PROCESSED
                    - DONE
                    - CANCEL
              required:
                - status
      responses:
        "200":
          description: Success to update botram order paid status
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          orderId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Updating order status successfully.",
                  "data": {
                    "botramOrderId": "550e8400-e29b-41d4-a716-44665544000"
                  }
                }
        "400":
          $ref: "#/components/responses/UpdateOrderStatusBadRequestError"
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Botram order is not found.",
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/orders/{botramOrderId}/botram/paid:
    put:
      tags:
        - Resto
        - Resto Orders
      description: API to update botram order paid status by id
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/OrderId"
      responses:
        "200":
          description: Success to update botram order status
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          orderId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Updating order payment status successfully.",
                  "data": { "botramOrderId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                botramOrderId param is missing:
                  value:
                    {
                      "success": false,
                      "message": "botramOrderId param is missing."
                    }
                Botram Order has Paid:
                  value:
                    {
                      "success": false,
                      "message": "Botram order status has been paid."
                    }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": true,
                  "message": "Botram order is not found."
                }
        "500":
          $ref: "#/components/responses/ServerError"
  # /resto/reviews/:
  # /resto/refresh-token/:
components:
  securitySchemes:
    RestoAccessTokenAuth:
      description: Access token for user resto
      type: apiKey
      in: cookie
      name: iertu8r54g734r23u4jrwoefuefudf328HYKDLMGSusr
  parameters:
    ProvinceId:
      name: provinceId
      in: query
      required: true
      description: Province id
      schema:
        type: string
        nullable: false
        default:
    UniqueString:
      name: uniqueString
      in: path
      required: true
      description: unique string uuid v4
      schema:
        type: string
    EtalaseId:
      name: etalaseId
      in: path
      required: true
      description: unique string uuid v4
      schema:
        type: string
    CategoryId:
      name: categoryId
      in: path
      description: Custom Menu Category Id
      required: true
      schema:
        type: string
    OrderId:
      name: orderId
      in: path
      required: true
      description: Order id
      schema:
        type: string
    BotramOrderId:
      name: botramOrderId
      in: path
      required: true
      description: Botram Order id
      schema:
        type: string
    CustomMenuCompositionId:
      name: compositionId
      in: path
      required: true
      description: Custom Menu Composition Id
      schema:
        type: string
    LimitPagination:
      name: limit
      in: query
      required: false
      description: limit of displayed data
      schema:
        type: string
        default: "10"
    PagePagination:
      name: page
      in: query
      required: false
      description: limit of displayed data
      schema:
        type: string
        default: "1"
  schemas:
    ErrorAPIResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
      required:
        - success
        - message
    SuccessAPIResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          oneOf:
            - type: array
            - type: object
      required:
        - success
        - message
    SuccessAPIReturnUserIdResponse:
      allOf:
        - $ref: "#/components/schemas/SuccessAPIResponse"
        - type: object
          properties:
            data:
              type: object
              properties:
                userId:
                  type: string
              required:
                - userId
      required:
        - success
        - message
        - data
    SuccessAPIReturnEtalaseIdResponse:
      allOf:
        - $ref: "#/components/schemas/SuccessAPIResponse"
        - type: object
          properties:
            data:
              type: object
              properties:
                etalaseId:
                  type: string
              required:
                - etalaseId
          required:
            - success
            - message
            - data
    ValidationErrorAPIResponse:
      allOf:
        - $ref: "#/components/schemas/ErrorAPIResponse"
        - type: object
          properties:
            errors:
              type: array
              items:
                type: object
                properties:
                  message:
                    type: string
                  field:
                    type: string
      required:
        - success
        - message
        - errors
    SuccessSigninResponse:
      allOf:
        - $ref: "#/components/schemas/SuccessAPIResponse"
        - type: object
          properties:
            data:
              type: object
              properties:
                userId:
                  type: string
                token:
                  type: string
    RestoName:
      type: string
      minLength: 3
      maxLength: 50
      pattern: /^[a-zA-Z0-9.,_\s-]+$/
    Username:
      type: string
      minLength: 3
      maxLength: 30
      pattern: /^[a-z0-9._']+$/
    Email:
      type: string
      minLength: 1
      maxLength: 254
    Password:
      type: string
      minLength: 6
    Avatar:
      type: string
    VillageId:
      type: string
    RestoLocationLink:
      type: string
      nullable: true
    RestoDetail:
      type: string
      maxLength: 200
      nullable: true
    RestoContact:
      type: string
      maxLength: 14
      nullable: true
    RestoImageGallery:
      type: array
      items:
        type: string
      maxItems: 5
    RestoOpeningHour:
      type: string
      maxLength: 5
      pattern: /^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/
      nullable: true
    RestoClosingHour:
      type: string
      maxLength: 5
      pattern: /^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/
      nullable: true
    RestoDaysOff:
      type: array
      items:
        type: string
        enum:
          - sunday
          - monday
          - tuesday
          - wednesday
          - thursday
          - friday
          - saturday
          - sunday
    RestoFasilities:
      type: array
      items:
        type: string
      maxItems: 100
    OrderDetailResponse:
      allOf:
        - $ref: "#/components/schemas/SuccessAPIResponse"
        - type: object
          properties:
            data:
              type: object
              properties:
                id:
                  type: string
                createdAt:
                  type: string
                isGroup:
                  type: boolean
                customer:
                  type: object
                  properties:
                    username:
                      type: string
                    name:
                      type: string
                status:
                  type: boolean
                isPaid:
                  type: boolean
                orderedMenu:
                  type: object
                  properties:
                    id:
                      type: string
                    menuId:
                      type: string
                    menuName:
                      type: string
                    menuPrice:
                      type: number
                    quantity:
                      type: number
                    totalPrice:
                      type: number
                    isDibungkus:
                      type: boolean
                    spicyLevel:
                      type: number
                      nullable: true
    OrderSuccessResponse:
      allOf:
        - $ref: "#/components/schemas/SuccessAPIResponse"
        - type: object
          properties:
            data:
              type: object
              properties:
                accepted:
                  type: number
                processed:
                  type: number
                done:
                  type: number
                cancel:
                  type: number
                total:
                  type: number
              required:
                - accepted
                - processed
                - done
                - cancel
                - total
          required:
            - success
            - message
            - data
  examples:
    # error response
    AuthenticationError:
      value:
        {
          "success": false,
          "message": "Access denied. Please authenticate to access this resource.",
        }
    AuthenticationErrorAccessTokenExpired:
      value:
        {
          "success": false,
          "message": "Token is expired.",
          "data": { "token": "550e8400-e29b-41d4-a716-44665544000" },
        }
    AuthenticationErrorRefreshTokenExpired:
      value:
        {
          "success": false,
          "message": "Token is expired.",
          "data": { "token": "550e8400-e29b-41d4-a716-44665544000" },
        }
    RestoEmailIsNotVerifiedError:
      value:
        {
          "success": true,
          "message": "Access denied. Please verify your email.",
        }
    RestoMinimumSetupError:
      value:
        {
          "success": false,
          "message": "Your account has not completed the minimum profile setup. Please complete your profile before using the application features.",
        }
    # success response
    SuccessSigninResponse:
      value:
        {
          "success": true,
          "message": "Signin successfully.",
          "data":
            {
              "userId": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
              "token": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
            },
        }
  requestBodies:
    CreateAndUpdateEtalase:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                minLength: 1
                maxLength: 20
            required:
              - name
          example: { "name": "Makanan" }
    CreateAndUpdateMenu:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                minLength: 1
                maxLength: 80
                pattern: /^[a-zA-Z0-9.'\s-]+$/
              isBungkusAble:
                type: boolean
              description:
                type: string
                minLength: 1
                maxLength: 3000
              etalaseId:
                type: string
              price:
                type: number
              images:
                type: array
                items:
                  type: string
                minItems: 1
                maxItems: 5
              maxSpicy:
                type: number
                nullable: true
                default: null
            required:
              - name
              - isBungkusAble
              - description
              - etalaseId
              - price
              - images
          example:
            # engke
    CreateAndUpdateCustomMenuCategory:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                minLength: 1
                maxLength: 50
              isBungkusAble:
                type: boolean
                default: false
              maxSpicy:
                type: number
                nullable: true
            required:
              - name
    CreateAndUpdateCustomMenuComposition:
      content:
        application/json:
          schema:
            type: object
            properties:
              customMenuCategoryId:
                type: string
              name:
                type: string
                minLength: 1
                maxLength: 80
              description:
                type: string
                minLength: 1
                maxLength: 3000
              price:
                type: number
              images:
                type: array
                items:
                  type: string
                minItems: 1
                maxItems: 2
              stock:
                type: number
                default: 0
            required:
              - customMenuCategoryId
              - name
              - description
              - price
              - images
          example:
            # engke
  responses:
    RestoAccessTokenError:
      description: Access Token Error
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/ErrorAPIResponse"
              - allOf:
                  - $ref: "#/components/schemas/ErrorAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          token:
                            type: string
                    required:
                      - success
                      - message
          examples:
            AuthenticationError:
              $ref: "#/components/examples/AuthenticationError"
            AuthenticationErrorAccessTokenExpired:
              $ref: "#/components/examples/AuthenticationErrorAccessTokenExpired"
            AuthenticationErrorRefreshTokenExpired:
              $ref: "#/components/examples/AuthenticationErrorRefreshTokenExpired"
    RestoConflictError:
      description: Conflict Error. Duplicate username or email
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorAPIResponse"
          examples:
            Username:
              value:
                {
                  "success": false,
                  "message": "username is exist. Please use another.",
                }
            Email:
              value:
                {
                  "success": false,
                  "message": "email is exist. Please use another.",
                }
    RestoVerificationAndMinimumSetupMiddlewareError:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorAPIResponse"
          examples:
            RestoEmailIsNotVerifiedError:
              $ref: "#/components/examples/RestoEmailIsNotVerifiedError"
            RestoMinimumSetupError:
              $ref: "#/components/examples/RestoMinimumSetupError"
    ServerError:
      description: Error response if some unknown error happen to the server
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorAPIResponse"
          example:
            {
              "success": false,
              "message": "Something went wrong. Try again later.",
            }
    UpdateOrderStatusBadRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorAPIResponse"
          examples:
            Invalid Status Body Payload:
              value:
              {
                "success": false,
                "message": "status body payload is invalid."
              }
            Invalid Accepted Status:
              value:
              {
                "success": false,
                "message": "status body payload is invalid. ACCEPTED is allowed if status order is READY_TO_ORDER."
              }
            Invalid Processed Status:
              value:
              {
                "success": false,
                "message": "status body payload is invalid. PROCESSED is allowed if status order is ACCEPTED_BY_RESTO."
              }
            Invalid Done Status:
              value:
              {
                "success": false,
                "message": "status body payload is invalid. DONE is allowed if status order is PROCESSED_BY_RESTO."
              }
            Invalid CANCEL Status:
              value:
              {
                "success": false,
                "message": "status body payload is invalid. CANCEL is allowed if status order is PROCESSED_BY_RESTO."
              }
            Menu Stock is running out:
              value:
              {
                "success": false,
                "message": "Menu stock is running out. Please try again later."
              }
            Custom Menu Composition Stock is running out:
              value:
              {
                "success": false,
                "message": "Custom Menu Composition is run out of stock. Please try again later."
              }
# RESTO_ACCESS_TOKEN_COOKIE_NAME=iertu8r54g734r23u4jrwoefuefudf328HYKDLMGSusr
# CUSTOMER_ACCESS_TOKEN_COOKIE_NAME=45237rh0341wirjfuwaer723UHFYsdgfwer8wehYYg
